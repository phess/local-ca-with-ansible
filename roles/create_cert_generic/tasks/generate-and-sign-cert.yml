---
### Based on https://docs.ansible.com/ansible/latest/collections/community/crypto/docsite/guide_ownca.html
- name: Do we have a cert in place already?
  ansible.builtin.stat:
    path: "{{ server_cert_file }}"
  register:
    cert_file_stat

- name: Stop now if cert exists
  ansible.builtin.fail:
    msg: "Cert file already exists at {{ server_cert_file }}"
  when: cert_file_stat.stat.exists and not replace_cert_if_exists

- name: "Ensure directory {{ server_cert_file | ansible.builtin.dirname }} exists"
  ansible.builtin.file:
    path: "{{ cert_file | ansible.builtin.dirname }}"
    state: directory

- name: Convert SAN entry string to list
  ansible.builtin.set_fact:
    san_entries_as_list: "{{ san_entries.split(',') |default([]) }}"
  when: san_entries |type_debug in ("AnsibleUnicode", "str") and ( is_server or is_client )

- ansible.builtin.set_fact:
    san_entries_as_list: "{{ san_entries | default([]) }}"
  when: san_entries |type_debug == "list" and ( is_server or is_client )

- name: Convert Server CN entry to list for later combining into SAN entry list
  ansible.builtin.set_fact:
    server_cn_as_list:
      - "DNS:{{ server_cn }}"
  when: is_server or is_client

- name: Ensure server_cn is in SAN list
  ansible.builtin.set_fact:
    san_entries_as_list: "{{ san_entries_as_list | union(server_cn_as_list) | unique}}"
  when: is_server or is_client

- debug:
    var: san_entries_as_list

- name: Turn san_entries into string from list
  ansible.builtin.set_fact:
    san_entries_as_string: "{{ ','.join(san_entries_as_list) }}"
  when: is_server or is_client

- debug:
    var: san_entries_as_string


- name: Create CSR for the certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: '{{ server_key_file }}'
    basic_constraints:
      - 'CA:{{ is_ca | default(False) | upper }}'
    common_name: '{{ server_cn | default("my-server.example.com") if is_server or is_client else server_cn | default("My CA") }}'
    ## Commenting this out as it causes subject_alt_name to be overwritten with ONLY the contents of common_name.
    #use_common_name_for_san: "{{ is_server or is_client }}"
    subject_alt_name: "{{ san_entries_as_string | default(omit) }}"
    basic_constraints_critical: true
    basic_constraints:
      - 'CA:{{ is_ca | default(False) | upper }}'
    key_usage_critical: true
    key_usage: >
      [
        "digitalSignature",
        {% if is_ca %}
          "keyEncipherment",
        {% endif %}
      ]
    extended_key_usage: >
      [
        "clientAuth",
        {% if is_server or is_ca %}
          "serverAuth"
        {% endif %}
      ]
  register: csr

- name: Generate a self-signed cert from CSR
  community.crypto.x509_certificate:
    backup: true
    path: "{{ server_cert_file }}"
    privatekey_path: "{{ server_key_file }}"
    csr_content: "{{ csr.csr }}"
    provider: selfsigned
    mode: 'u=rw,g=-,o=-'
  when: self_sign

- block:
  - name: Sign CSR into cert using CA
    community.crypto.x509_certificate_pipe:
      csr_content: "{{ csr.csr }}"
      provider: ownca
      ownca_path: "{{ issuer_ca_cert_file }}"
      ownca_privatekey_path: "{{ issuer_ca_key_file }}"
      #ownca_privatekey_passphrase: "{{ secret_ca_passphrase }}"
      ownca_not_after: +365d  # valid for one year
      ownca_not_before: "-1d"  # valid since yesterday
    register: certificate

  - name: "Write certificate file to {{ server_cert_file }}"
    ansible.builtin.copy:
      dest: "{{ server_cert_file }}"
      content: "{{ certificate.certificate }}"

  when: not self_sign
